[31m          _____                   _____    _____                    _____                  _______                  _____          [0m
[31m         /\    \                 /\    \  /\    \                  /\    \                /::\    \                /\    \         [0m
[31m        /::\    \               /::\____\/::\    \                /::\    \              /::::\    \              /::\    \        [0m
[31m       /::::\    \             /:::/    /::::\    \              /::::\    \            /::::::\    \            /::::\    \       [0m
[31m      /::::::\    \           /:::/    /::::::\    \            /::::::\    \          /::::::::\    \          /::::::\    \      [0m
[31m     /:::/\:::\    \         /:::/    /:::/\:::\    \          /:::/\:::\    \        /:::/~~\:::\    \        /:::/\:::\    \     [0m
[31m    /:::/  \:::\    \       /:::/    /:::/__\:::\    \        /:::/  \:::\    \      /:::/    \:::\    \      /:::/__\:::\    \    [0m
[31m   /:::/    \:::\    \     /:::/    /::::\   \:::\    \      /:::/    \:::\    \    /:::/    / \:::\    \     \:::\   \:::\    \   [0m
[31m  /:::/    / \:::\    \   /:::/    /::::::\   \:::\    \    /:::/    / \:::\    \  /:::/____/   \:::\____\  ___\:::\   \:::\    \  [0m
[31m /:::/    /   \:::\ ___\ /:::/    /:::/\:::\   \:::\    \  /:::/    /   \:::\ ___\|:::|    |     |:::|    |/\   \:::\   \:::\    \ [0m
[31m/:::/____/  ___\:::|    /:::/____/:::/  \:::\   \:::\____\/:::/____/     \:::|    |:::|____|     |:::|    /::\   \:::\   \:::\____\[0m
[31m\:::\    \ /\  /:::|____\:::\    \::/    \:::\  /:::/    /\:::\    \     /:::|____|\:::\    \   /:::/    /\:::\   \:::\   \::/    /[0m
[31m \:::\    /::\ \::/    / \:::\    \/____/ \:::\/:::/    /  \:::\    \   /:::/    /  \:::\    \ /:::/    /  \:::\   \:::\   \/____/ [0m
[31m  \:::\   \:::\ \/____/   \:::\    \       \::::::/    /    \:::\    \ /:::/    /    \:::\    /:::/    /    \:::\   \:::\    \     [0m
[31m   \:::\   \:::\____\      \:::\    \       \::::/    /      \:::\    /:::/    /      \:::\__/:::/    /      \:::\   \:::\____\    [0m
[31m    \:::\  /:::/    /       \:::\    \      /:::/    /        \:::\  /:::/    /        \::::::::/    /        \:::\  /:::/    /    [0m
[31m     \:::\/:::/    /         \:::\    \    /:::/    /          \:::\/:::/    /          \::::::/    /          \:::\/:::/    /     [0m
[31m      \::::::/    /           \:::\    \  /:::/    /            \::::::/    /            \::::/    /            \::::::/    /      [0m
[31m       \::::/    /             \:::\____\/:::/    /              \::::/    /              \::/____/              \::::/    /       [0m
[31m        \::/____/               \::/    /\::/    /                \::/____/                ~~                     \::/    /        [0m
[31m                                 \/____/  \/____/                  ~~                                              \/____/         [0m
[31m                                                                                                                                   [0m
Test1 :
(div 10 2)
Test1: Simple call
     Expected: 5
     Got: 5 OK - Passed

Test2 :
((lambda (a b) (+ a b)) 1 2)
Test2: lambda use with parameters
     Expected: 3
     Got: 3 OK - Passed

Test3 :
(define (fib-it a b n)
  (if (< n 1)
    a
    (fib-it b (+ a b) (- n 1))))

(define (fib n)
  (fib-it 0 1 n))

(fib 10)
Test3: Env set with two functions
     Expected: 3628800
     Got:  KO

Test4 :
(div (div 20 2) 2)
Test4: Nested function calls
     Expected: 5
     Got: 5 OK - Passed

Test5 :
(define (> a b)
    (if (eq? a b)
        #f
        (if (< a b)
            #f
            #t)))
(> 10 -2)
Test5: Builtins (>)
     Expected: #t
     Got: #t OK - Passed

Test6 :
(define foo 42)
(if (< foo 10)
    (* foo 8)
    (* foo 10))
Test6: Builtins (if)
     Expected: 420
     Got: 420 OK - Passed

Test7 :
(+ (* 4 1) (* 7 6))
Test7: Builtins (+, *)
     Expected: 46
     Got: 46 OK - Passed

Test8 :
(lambda (a b) (+ a b))
Test8: Builtins (>)
     Expected: #<procedure>
     Got: #<procedure> OK - Passed

Test9 :
(define (fact x)
    (if (eq? x 1)
        1
        (* x (fact (- x 1)))))
(fact 4)
Test9: Recursive
     Expected: 24
     Got: 24 OK - Passed
